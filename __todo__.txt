# Project To-Dos


## Project setup

-[ ]:Set up project with express,typescript,dotenv,mongoDB,Mongoose,and joi/zod.
-[ ]:create a interface and model
-[ ]:create module folder structure
-[ ]:create json data


## Product Management

### DELETE /api/products/:productId
- [ ] Create a DELETE endpoint to delete a product by `productId`.
- [ ] Write a controller function to handle product deletion.
- [ ] Ensure the product is removed from the database.
- [ ] Return a response with success status and message.
- [ ] Handle errors (e.g., product not found).

### GET /api/products?searchTerm=iphone
- [ ] Create a GET endpoint to search for products by a search term.
- [ ] Write a controller function to handle product search.
- [ ] Fetch products matching the search term from the database.
- [ ] Return a response with success status, message, and data (list of matching products).
- [ ] Handle errors (e.g., no products found).

## Order Management

### POST /api/orders
- [ ] Create a POST endpoint to create a new order.
- [ ] Write a controller function to handle order creation.
- [ ] Validate incoming order data using Joi/Zod.
- [ ] Check inventory for the ordered product quantity.
- [ ] If sufficient quantity, reduce the product inventory and update `inStock` status.
- [ ] If inventory quantity reaches zero, set `inStock` to false.
- [ ] Return a response with success status, message, and order data.
- [ ] Handle errors (e.g., insufficient quantity, validation errors).

### GET /api/orders
- [ ] Create a GET endpoint to retrieve all orders.
- [ ] Write a controller function to fetch all orders from the database.
- [ ] Return a response with success status, message, and data (list of orders).
- [ ] Handle errors (e.g., no orders found).

### GET /api/orders?email=level2@programming-hero.com
- [ ] Create a GET endpoint to retrieve orders by user email.
- [ ] Write a controller function to fetch orders for a specific user email.
- [ ] Return a response with success status, message, and data (list of orders for the user).
- [ ] Handle errors (e.g., no orders found for the user).

## Inventory Management

### Inventory Update on Order Creation
- [ ] Implement logic to check available inventory quantity when a new order is created.
- [ ] Reduce inventory quantity based on the ordered quantity.
- [ ] Update the `inStock` status accordingly.
- [ ] Return error response if ordered quantity exceeds available quantity.

## Error Handling

### Insufficient Quantity Error
- [ ] Return an error response if there is insufficient quantity available in inventory.

### Not Found Error
- [ ] Return an error response if the order or product is not found.

### Not Found Route
- [ ] Return an error response for invalid API routes.

## Validation

### Data Validation with Joi/Zod
- [ ] Use Joi/Zod to validate incoming data for product and order creation.
- [ ] Handle validation errors gracefully.
- [ ] Provide meaningful error messages in API responses.

## Coding Quality

### Code Organization
- [ ] Write clean, modular, and well-organized code.
- [ ] Follow consistent naming conventions for variables, functions, and routes.
- [ ] Ensure meaningful names that reflect the purpose of variables and functions.
- [ ] Ensure the code is readable.

### Comments
- [ ] Provide inline comments to explain complex sections of code or logic.

## Coding Tools and Libraries

### Tools and Libraries
- [ ] Avoid the use of AI tools or libraries for generating code.
- [ ] Utilize specified libraries like Express, Mongoose, Joi, and avoid unnecessary dependencies.

### Coding Style
- [ ] Use linting tools (e.g., ESLint) to enforce coding style and identify potential issues.
- [ ] Ensure there are at least 10 commits in the GitHub repository.

## Submission

### GitHub Repository
- [ ] Share the GitHub Repository link.

### Live Deployment
- [ ] Share the Live Deployment link.

### README File
- [ ] Include a README file with clear instructions on how to run the application locally.